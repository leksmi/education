# Пространство имен - это словарь, где записаны ссылки на объекты в памяти
# Область видимости - это путь для поиска имени в пространстве имен,
# фактически перечень словарей. Тут работает правило LEGB:
# Local
# Enclosed
# Global
# Builtin
# Есть 3 исключения, одно из них это определение Класов:
# Unbound local variables (несвязанные локальные переменные) разрешаются из Глобального пространства !
# Это следствие того, что у Класса свое пространство имен, у экземпляра свое, они изолированы друг от друга

from rich import print, inspect

name = "Ivan"


class Person:
    """
    Класс имеет свое пространство, тут есть name
    """

    name = "Dima"

    def print_name(self) -> None:
        """
        Метод имеет свое пространство, и name отсутствует !
        тут name это Unbound local variable, так как на момент вызова она не создана
        """
        print(f"{name=}")

    def print_name_self(self) -> None:
        """
        Прочитать переменную Класса можно через self
        Но только прочитать. При записи через self создается своя локальная переменная экземпляра
        """
        print(f"{self.name=}")

    @classmethod
    def change_class_var(cls, new_name) -> None:
        """
        Полноценное взаимодействие с переменными Класса возможно декорированием метода как @classmethod
        Данный декоратор связывает метод с Классом, не с экземпляром,
        Поэтому метод видит пространство имен только Класса, и не видит экземпляры.
        Предназначен для работы со свойствами Класса.
        """
        cls.name = new_name
        print(f"{cls.name=}")


p = Person()
p.print_name()
p.print_name_self()
print(f'\n{Person.__dict__=}\n{p.__dict__=}\n')
p.change_class_var(new_name="Sasha")
print(f'\n{Person.__dict__=}\n{p.__dict__=}')

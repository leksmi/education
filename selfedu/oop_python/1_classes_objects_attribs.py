# class ИмяКласса:
#    данные (атрибуты, они же свойства)
#    методы (действия)
#
#
# Инкапсуляция: предоставление разрешенных данных и методов и сокрытие Не разрешенных
# Наследование: предоставление разным классам данных и методов из других классов
# Полиморфизм: в случае Python это Параметрический полиморфизм. Применение метода в Объекте, который наследован из
# базового Класса: Базовый_класс --> Целевой_Класс(наследование Базового) -- > Объект

# Работа с атрибутами (свойствами/данными):
# hasattr(Класс/Объект, атрибут) проверка наличия атрибута: True/False. Учитывает простр-во имен класса !!!
# getattr(Класс/Объект, атрибут, [вывод при отсутствии]) вывод значения атрибута
# setattr(Класс/Объект, атрибут, значение)
# delattr(Класс/Объект, атрибут)
# __doc__  содержит строку с описанием Класса
# __dict__ содержит набор атрибутов

from rich import print


class Point:  # Класс образует пространство имен (scope)
    """Класс для определения точек"""
    color = 'red'  # атрибут
    circle = 2  # атрибут



# Выполнение текущего модуля:
if __name__ == '__main__':
    print(Point.color)  # доступ к атрибутам Класса
    print(Point.__dict__)  # вывод  атрибутов и методов Класса

    obj_1 = Point()  # создание объекта 1, образование scope экземпляра класса (объекта)
    obj_2 = Point()  # создание объекта 2, образование scope экземпляра класса (объекта)
    print(type(obj_1))
    print(f'Является ли obj_2 объектом класса Point ? : {isinstance(obj_2, Point)}')
    Point.type_pt = 'square' # добавление атрибута Класса

    # Проверяем, есть ли у Объектов свои атрибуты:
    print(obj_1.__dict__)  # нет: пустой словарь
    print(obj_2.__dict__)  # т.е. атрибуты будут взяты от Класса
    obj_1.x = 10     # добавление атрибута x Объекта 1
    obj_2.x = 1001   # добавление атрибута x Объекта 1

    # функции для работы с атрибутами:
    print(hasattr(Point, 'color'))        # проверка наличия на True/False
    print(hasattr(obj_2, 'circle'))       # проверка наличия на True/False
    print(getattr(obj_1, 'type_pt', None)) # учитывает scope Класса !
    print(obj_1.__dict__)
    print(getattr(Point, 'type_pt', None))
    # вывод документации Класса (пишется сразу после строки объявления класса)
    print(Point.__doc__)
